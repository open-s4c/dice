/*
 * Copyright (C) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 * SPDX-License-Identifier: MIT
 */
#include <dice/pubsub.h>
#define _tmpl_mute
#define _tmpl_begin(...)
#define _tmpl_map(...)
#define _tmpl_end()
#define _tmpl2_begin(...)
#define _tmpl2_end()
#define _tmpl3_begin(...)
#define _tmpl3_end()
#define CCC 0
#define EEE 0
#define SSS 0
#define _tmpl_unmute
_tmpl_begin(CCC = CHAINS, SSS = SLOTS);
DICE_WEAK DICE_HIDE enum ps_cb_err
ps_callback_CCC_0_SSS_(const chain_id chain, const type_id type, void *event,
                       metadata_t *md)
{
    (void)chain;
    (void)type;
    (void)event;
    (void)md;
    return PS_CB_OFF;
}
_tmpl_end();

_tmpl_begin(CCC = CHAINS, EEE = EVENTS, SSS = SLOTS);
DICE_WEAK DICE_HIDE enum ps_cb_err
ps_callback_CCC_EEE_SSS_(const chain_id chain, const type_id type, void *event,
                         metadata_t *md)
{
    (void)chain;
    (void)type;
    (void)event;
    (void)md;
    return PS_CB_OFF;
}
_tmpl_end();

_tmpl_begin(CCC = CHAINS, EEE = EVENTS);
static enum ps_cb_err
ps_dispatch_CCC_EEE_(const chain_id chain, const type_id type, void *event,
                     metadata_t *md)
{
    enum ps_cb_err err;
    _tmpl2_begin(SSS = SLOTS);
    {
        err = ps_callback_CCC_EEE_SSS_(chain, type, event, md);
        if (err == PS_CB_STOP)
            return PS_CB_STOP;

        err = ps_callback_CCC_0_SSS_(chain, type, event, md);
        if (err == PS_CB_STOP)
            return PS_CB_STOP;
    }
    _tmpl2_end();
    return PS_CB_OK;
}
_tmpl_end();

/* chain dispatcher prototypes */
_tmpl_begin(CCC = CHAINS);
DICE_HIDE enum ps_cb_err
ps_dispatch_CCC_(const chain_id chain, const type_id type, void *event,
                 metadata_t *md)
{
    switch (type) {
        default:
            return PS_CB_OFF;
            _tmpl2_begin(EEE = EVENTS);
        case EEE:
            return ps_dispatch_CCC_EEE_(chain, type, event, md);
            _tmpl2_end();
    }
}
_tmpl_end();
